diff -rcN gcc-4.4.0-e500mc64/gcc/config/rs6000/e500mc.h gcc-4.4.0-e500mc64bm/gcc/config/rs6000/e500mc.h
*** gcc-4.4.0-e500mc64/gcc/config/rs6000/e500mc.h	1969-12-31 18:00:00.000000000 -0600
--- gcc-4.4.0-e500mc64bm/gcc/config/rs6000/e500mc.h	2010-05-12 14:29:45.000000000 -0500
***************
*** 0 ****
--- 1,342 ----
+ /* Core target definitions for GNU compiler
+    for IBM RS/6000 PowerPC targeted to embedded ELF systems.
+    Copyright (C) 1995, 1996, 2000, 2003, 2004, 2007 Free Software Foundation, Inc.
+    Contributed by Cygnus Support.
+ 
+    This file is part of GCC.
+ 
+    GCC is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published
+    by the Free Software Foundation; either version 3, or (at your
+    option) any later version.
+ 
+    GCC is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+    License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with GCC; see the file COPYING3.  If not see
+    <http://www.gnu.org/licenses/>.  */
+ 
+ /* Add -meabi to target flags.  */
+ #undef TARGET_DEFAULT
+ #define TARGET_DEFAULT 0
+ 
+ #ifdef RS6000_BI_ARCH
+ #define DEFAULT_ARCH64_P (TARGET_DEFAULT & OPTION_MASK_64BIT)
+ #define RS6000BI_ARCH_P 1
+ #endif
+ 
+ #ifdef IN_LIBGCC2
+ #undef TARGET_64BIT
+ #ifdef __powerpc64__
+ #define TARGET_64BIT 1
+ #else
+ #define TARGET_64BIT 0
+ #endif
+ #endif
+ 
+ 
+ 
+ 
+ #undef	ASM_DEFAULT_SPEC
+ #undef	ASM_SPEC
+ #undef	LINK_OS_LINUX_SPEC
+ 
+ #ifndef	RS6000_BI_ARCH
+ #define	ASM_DEFAULT_SPEC "-mppc%{m64:64}"
+ #define	ASM_SPEC	 "%{!m64:%(asm_spec32)}%{m64:%(asm_spec64)} %(asm_spec_common)"
+ #define	LINK_OS_LINUX_SPEC "%{!m64:%(link_os_linux_spec32)}%{m64:%(link_os_linux_spec64)}"
+ #else
+ #if DEFAULT_ARCH64_P
+ #define	ASM_DEFAULT_SPEC "-mppc%{!m32:64}"
+ #define	ASM_SPEC	 "%{m32:%(asm_spec32)}%{!m32:%(asm_spec64)} %(asm_spec_common)"
+ #define	LINK_OS_LINUX_SPEC "%{m32:%(link_os_linux_spec32)}%{!m32:%(link_os_linux_spec64)}"
+ #else
+ #define	ASM_DEFAULT_SPEC "-mppc%{m64:64}"
+ #define	ASM_SPEC	 "%{!m64:%(asm_spec32)}%{m64:%(asm_spec64)} %(asm_spec_common)"
+ #define	LINK_OS_LINUX_SPEC "%{!m64:%(link_os_linux_spec32)}%{m64:%(link_os_linux_spec64)}"
+ #endif
+ #endif
+ 
+ #define ASM_SPEC32 "-a32 %{n} %{T} %{Ym,*} %{Yd,*} \
+ %{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} \
+ %{memb} %{!memb: %{msdata: -memb} %{msdata=eabi: -memb}} \
+ %{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \
+     %{mcall-freebsd: -mbig} \
+     %{mcall-i960-old: -mlittle} \
+     %{mcall-linux: -mbig} \
+     %{mcall-gnu: -mbig} \
+     %{mcall-netbsd: -mbig} \
+ }}}}"
+ 
+ #define ASM_SPEC64 "-a64"
+ 
+ #define ASM_SPEC_COMMON "%(asm_cpu) \
+ %{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \
+ %{v:-V} %{Qy:} %{!Qn:-Qy} %{Wa,*:%*} \
+ %{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}"
+ 
+ #undef	SUBSUBTARGET_EXTRA_SPECS
+ #define SUBSUBTARGET_EXTRA_SPECS \
+   { "asm_spec_common",		ASM_SPEC_COMMON },			\
+   { "asm_spec32",		ASM_SPEC32 },				\
+   { "asm_spec64",		ASM_SPEC64 },				\
+ 
+ #undef	MULTILIB_DEFAULTS
+ #if DEFAULT_ARCH64_P
+ #define MULTILIB_DEFAULTS { "m64" }
+ #else
+ #define MULTILIB_DEFAULTS { "m32" }
+ #endif
+ 
+ #define POWERPC_LINUX
+ 
+ /* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */
+ #undef  ADJUST_FIELD_ALIGN
+ #define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \
+   ((TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE)	\
+    ? 128								\
+    : (TARGET_64BIT							\
+       && TARGET_ALIGN_NATURAL == 0					\
+       && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)	\
+    ? MIN ((COMPUTED), 32)						\
+    : (COMPUTED))
+ 
+ /* PowerPC64 Linux increases natural record alignment to doubleword if
+    the first field is an FP double, only if in power alignment mode.  */
+ #undef  ROUND_TYPE_ALIGN
+ #define ROUND_TYPE_ALIGN(STRUCT, COMPUTED, SPECIFIED)			\
+   ((TARGET_64BIT							\
+     && (TREE_CODE (STRUCT) == RECORD_TYPE				\
+ 	|| TREE_CODE (STRUCT) == UNION_TYPE				\
+ 	|| TREE_CODE (STRUCT) == QUAL_UNION_TYPE)			\
+     && TARGET_ALIGN_NATURAL == 0)					\
+    ? rs6000_special_round_type_align (STRUCT, COMPUTED, SPECIFIED)	\
+    : MAX ((COMPUTED), (SPECIFIED)))
+ 
+ /* Use the default for compiling target libs.  */
+ #ifdef IN_TARGET_LIBS
+ #undef TARGET_ALIGN_NATURAL
+ #define TARGET_ALIGN_NATURAL 1
+ #endif
+ 
+ /* Indicate that jump tables go in the text section.  */
+ #undef  JUMP_TABLES_IN_TEXT_SECTION
+ #define JUMP_TABLES_IN_TEXT_SECTION TARGET_64BIT
+ 
+ /* The linux ppc64 ABI isn't explicit on whether aggregates smaller
+    than a doubleword should be padded upward or downward.  You could
+    reasonably assume that they follow the normal rules for structure
+    layout treating the parameter area as any other block of memory,
+    then map the reg param area to registers.  i.e. pad upward.
+    Setting both of the following defines results in this behavior.
+    Setting just the first one will result in aggregates that fit in a
+    doubleword being padded downward, and others being padded upward.
+    Not a bad idea as this results in struct { int x; } being passed
+    the same way as an int.  */
+ #define AGGREGATE_PADDING_FIXED TARGET_64BIT
+ #define AGGREGATES_PAD_UPWARD_ALWAYS 0
+ 
+ /* Specify padding for the last element of a block move between
+    registers and memory.  FIRST is nonzero if this is the only
+    element.  */
+ #define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \
+   (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))
+ 
+ #undef  TARGET_OS_CPP_BUILTINS
+ #define TARGET_OS_CPP_BUILTINS()			\
+   do							\
+     {							\
+       if (TARGET_64BIT)					\
+ 	{						\
+ 	  builtin_define ("__PPC__");			\
+ 	  builtin_define ("__PPC64__");			\
+ 	  builtin_define ("__powerpc__");		\
+ 	  builtin_define ("__powerpc64__");		\
+ 	  builtin_assert ("cpu=powerpc64");		\
+ 	  builtin_assert ("machine=powerpc64");		\
+ 	}						\
+       else						\
+ 	{						\
+ 	  builtin_define_std ("PPC");			\
+ 	  builtin_define ("__embedded__");		\
+ 	  builtin_assert ("system=embedded");		\
+ 	  builtin_assert ("cpu=powerpc");		\
+ 	  builtin_assert ("machine=powerpc");		\
+ 	  TARGET_OS_SYSV_CPP_BUILTINS ();		\
+ 	}						\
+     }							\
+   while (0)
+ 
+ /* Must be at least as big as our pointer type.  */
+ #undef	SIZE_TYPE
+ #define	SIZE_TYPE (TARGET_64BIT ? "long unsigned int" : "unsigned int")
+ 
+ #undef	PTRDIFF_TYPE
+ #define	PTRDIFF_TYPE (TARGET_64BIT ? "long int" : "int")
+ 
+ #undef	WCHAR_TYPE
+ #define	WCHAR_TYPE (TARGET_64BIT ? "int" : "long int")
+ #undef  WCHAR_TYPE_SIZE
+ #define WCHAR_TYPE_SIZE 32
+ 
+ #ifdef __powerpc64__
+ /* _init and _fini functions are built from bits spread across many
+    object files, each potentially with a different TOC pointer.  For
+    that reason, place a nop after the call so that the linker can
+    restore the TOC pointer if a TOC adjusting call stub is needed.  */
+ #if DOT_SYMBOLS
+ #define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)	\
+   asm (SECTION_OP "\n"					\
+ "	bl ." #FUNC "\n"				\
+ "	nop\n"						\
+ "	.previous");
+ #else
+ #define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)	\
+   asm (SECTION_OP "\n"					\
+ "	bl " #FUNC "\n"					\
+ "	nop\n"						\
+ "	.previous");
+ #endif
+ #endif
+ 
+ /* FP save and restore routines.  */
+ #undef  SAVE_FP_PREFIX
+ #define SAVE_FP_PREFIX (TARGET_64BIT ? "._savef" : "_savefpr_")
+ #undef  SAVE_FP_SUFFIX
+ #define SAVE_FP_SUFFIX (TARGET_64BIT ? "" : "_l")
+ #undef  RESTORE_FP_PREFIX
+ #define RESTORE_FP_PREFIX (TARGET_64BIT ? "._restf" : "_restfpr_")
+ #undef  RESTORE_FP_SUFFIX
+ #define RESTORE_FP_SUFFIX (TARGET_64BIT ? "" : "_l")
+ 
+ /* Dwarf2 debugging.  */
+ #undef  PREFERRED_DEBUGGING_TYPE
+ #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG
+ 
+ /* This is how to declare the size of a function.  */
+ #undef	ASM_DECLARE_FUNCTION_SIZE
+ #define	ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)			\
+   do									\
+     {									\
+       if (!flag_inhibit_size_directive)					\
+ 	{								\
+ 	  fputs ("\t.size\t", (FILE));					\
+ 	  if (TARGET_64BIT && DOT_SYMBOLS)				\
+ 	    putc ('.', (FILE));						\
+ 	  assemble_name ((FILE), (FNAME));				\
+ 	  fputs (",.-", (FILE));					\
+ 	  rs6000_output_function_entry (FILE, FNAME);			\
+ 	  putc ('\n', (FILE));						\
+ 	}								\
+     }									\
+   while (0)
+ 
+ /* Return nonzero if this entry is to be written into the constant
+    pool in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF
+    or a CONST containing one of them.  If -mfp-in-toc (the default),
+    we also do this for floating-point constants.  We actually can only
+    do this if the FP formats of the target and host machines are the
+    same, but we can't check that since not every file that uses
+    GO_IF_LEGITIMATE_ADDRESS_P includes real.h.  We also do this when
+    we can write the entry into the TOC and the entry is not larger
+    than a TOC entry.  */
+ 
+ #undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P
+ #define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)			\
+   (TARGET_TOC								\
+    && (GET_CODE (X) == SYMBOL_REF					\
+        || (GET_CODE (X) == CONST && GET_CODE (XEXP (X, 0)) == PLUS	\
+ 	   && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)		\
+        || GET_CODE (X) == LABEL_REF					\
+        || (GET_CODE (X) == CONST_INT 					\
+ 	   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))	\
+        || (GET_CODE (X) == CONST_DOUBLE					\
+ 	   && ((TARGET_64BIT						\
+ 		&& (TARGET_MINIMAL_TOC					\
+ 		    || (SCALAR_FLOAT_MODE_P (GET_MODE (X))		\
+ 			&& ! TARGET_NO_FP_IN_TOC)))			\
+ 	       || (!TARGET_64BIT					\
+ 		   && !TARGET_NO_FP_IN_TOC				\
+ 		   && !TARGET_RELOCATABLE				\
+ 		   && SCALAR_FLOAT_MODE_P (GET_MODE (X))		\
+ 		   && BITS_PER_WORD == HOST_BITS_PER_INT)))))
+ 
+ /* Select a format to encode pointers in exception handling data.  CODE
+    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is
+    true if the symbol may be affected by dynamic relocations.  */
+ #undef	ASM_PREFERRED_EH_DATA_FORMAT
+ #define	ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \
+   ((TARGET_64BIT || flag_pic || TARGET_RELOCATABLE)			\
+    ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel		\
+       | (TARGET_64BIT ? DW_EH_PE_udata8 : DW_EH_PE_sdata4))		\
+    : DW_EH_PE_absptr)
+ 
+ /* For backward compatibility, we must continue to use the AIX
+    structure return convention.  */
+ #undef DRAFT_V4_STRUCT_RET
+ #define DRAFT_V4_STRUCT_RET 0
+ 
+ #define TARGET_ASM_FILE_END rs6000_elf_file_end
+ 
+ #define LINK_GCC_C_SEQUENCE_SPEC \
+   "%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}"
+ 
+ /* Use --as-needed -lgcc_s for eh support.  */
+ #ifdef HAVE_LD_AS_NEEDED
+ #define USE_LD_AS_NEEDED 1
+ #endif
+ 
+ #undef	TARGET_AIX
+ #define	TARGET_AIX TARGET_64BIT
+ 
+ #undef CC1_EXTRA_SPEC
+ #define CC1_EXTRA_SPEC "-maix-struct-return"
+ 
+ #undef RS6000_ABI_NAME
+ #define RS6000_ABI_NAME "linux"
+ 
+ #define INVALID_64BIT "-m%s not supported in this configuration"
+ #define INVALID_32BIT INVALID_64BIT
+ 
+ #undef SUBSUBTARGET_OVERRIDE_OPTIONS
+ #define SUBSUBTARGET_OVERRIDE_OPTIONS		\
+   do						\
+     {						\
+       if (!global_options_set.x_rs6000_alignment_flags)	\
+ 	rs6000_alignment_flags = MASK_ALIGN_NATURAL;		\
+       if (TARGET_64BIT)					\
+ 	{							\
+ 	  if (DEFAULT_ABI != ABI_AIX)				\
+ 	    {							\
+ 	      rs6000_current_abi = ABI_AIX;			\
+ 	      error (INVALID_64BIT, "call");			\
+ 	    }							\
+ 	  dot_symbols = !strcmp (rs6000_abi_name, "aixdesc");	\
+ 	  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)	\
+ 	    {							\
+ 	      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;	\
+ 	      error (INVALID_64BIT, "relocatable");		\
+ 	    }							\
+ 	  if (rs6000_isa_flags & OPTION_MASK_EABI)		\
+ 	    {							\
+ 	      rs6000_isa_flags &= ~OPTION_MASK_EABI;		\
+ 	    }							\
+ 	  if (TARGET_PROTOTYPE)					\
+ 	    {							\
+ 	      TARGET_PROTOTYPE = 0;				\
+ 	      error (INVALID_64BIT, "prototype");		\
+ 	    }							\
+ 	  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)	\
+ 	    {							\
+ 	      rs6000_isa_flags |= OPTION_MASK_POWERPC64;	\
+ 	      error ("-m64 requires a PowerPC64 cpu");		\
+ 	    }							\
+ 	}							\
+     }						\
+   while (0)
+ /* Linux doesn't support saving and restoring 64-bit regs in a 32-bit
+    process.  */
+ #define OS_MISSING_POWERPC64 !TARGET_64BIT
diff -rcN gcc-4.4.0-e500mc64/gcc/config/rs6000/t-ppc-e500mc gcc-4.4.0-e500mc64bm/gcc/config/rs6000/t-ppc-e500mc
*** gcc-4.4.0-e500mc64/gcc/config/rs6000/t-ppc-e500mc	1969-12-31 18:00:00.000000000 -0600
--- gcc-4.4.0-e500mc64bm/gcc/config/rs6000/t-ppc-e500mc	2010-05-12 14:29:52.000000000 -0500
***************
*** 0 ****
--- 1,15 ----
+ # Multilibs for powerpc embedded ELF targets.
+ 
+ MULTILIB_OPTIONS	= m32/m64
+ 
+ MULTILIB_DIRNAMES	= 32 64
+ 
+ MULTILIB_EXCEPTIONS	= 
+ 
+ MULTILIB_EXTRA_OPTS	= mno-eabi mstrict-align
+ 
+ MULTILIB_MATCHES	= ${MULTILIB_MATCHES_FLOAT} \
+ 			  ${MULTILIB_MATCHES_ENDIAN}
+ 
+ softfp_wrap_start := '\#ifndef __powerpc64__'
+ softfp_wrap_end := '\#endif'
--- gcc-4.6.2/gcc/config.gcc-orig	2011-11-22 12:48:59.524039001 -0600
+++ gcc-4.6.2/gcc/config.gcc	2011-11-22 12:51:53.279039002 -0600
@@ -2120,6 +2120,23 @@
 	extra_options="${extra_options} rs6000/sysv4.opt"
 	tmake_file="rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm"
 	;;
+powerpc-*-aeabi)
+	tm_file="${tm_file} dbxelf.h elfos.h usegas.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h"
+	extra_options="${extra_options} rs6000/sysv4.opt"
+	tmake_file="rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm"
+	case ${enable_targets}:${cpu_is_64bit} in
+	  *powerpc64* | all:* | *:yes)
+	  if test x$cpu_is_64bit = xyes; then
+	    tm_file="${tm_file} rs6000/default64.h"
+	  fi
+	  tm_file="rs6000/biarch64.h ${tm_file}"
+	  ;;
+	esac
+	if test x$enable_powerpc_e500mc_aeabi = xyes; then
+	  tm_file="${tm_file} rs6000/e500mc.h"
+	  tmake_file="${tmake_file} rs6000/t-ppc-e500mc"
+	fi
+	;;
 powerpc-*-eabialtivec*)
 	tm_file="${tm_file} dbxelf.h elfos.h freebsd-spec.h newlib-stdint.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h rs6000/eabialtivec.h"
 	extra_options="${extra_options} rs6000/sysv4.opt"
--- gcc-4.5.0/gcc/config/rs6000/sysv4.h-orig	2010-05-24 14:51:20.000000000 -0500
+++ gcc-4.5.0/gcc/config/rs6000/sysv4.h	2010-05-24 14:52:01.000000000 -0500
@@ -619,6 +619,9 @@
 #define CC1_SECURE_PLT_DEFAULT_SPEC ""
 #endif
 
+#undef CC1_EXTRA_SPEC
+#define CC1_EXTRA_SPEC ""
+
 /* Pass -G xxx to the compiler and set correct endian mode.  */
 #define	CC1_SPEC "%{G*} %(cc1_cpu) \
 %{mlittle|mlittle-endian: %(cc1_endian_little);           \
@@ -643,7 +646,7 @@
 %{msdata: -msdata=default} \
 %{mno-sdata: -msdata=none} \
 %{!mbss-plt: %{!msecure-plt: %(cc1_secure_plt_default)}} \
-%{profile: -p}"
+%{profile: -p}" CC1_EXTRA_SPEC
 
 /* Don't put -Y P,<path> for cross compilers.  */
 #ifndef CROSS_DIRECTORY_STRUCTURE
--- gcc-4.6.2/config.sub-orig	2011-11-22 14:18:31.662038999 -0600
+++ gcc-4.6.2/config.sub	2011-11-22 14:19:46.404039002 -0600
@@ -1305,7 +1305,7 @@
 	      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \
 	      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \
 	      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \
-	      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \
+	      | -udi* | -eabi* | -aeabi* | -lites* | -ieee* | -go32* | -aux* \
 	      | -chorusos* | -chorusrdb* | -cegcc* \
 	      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \
 	      | -mingw32* | -linux-gnu* | -linux-android* \
--- gcc-4.7.2/libgcc/config.host-orig	2013-03-29 10:53:53.813779000 -0500
+++ gcc-4.7.2/libgcc/config.host	2013-03-29 10:53:43.112779000 -0500
@@ -890,6 +890,10 @@
 	tmake_file="${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff t-crtstuff-pic t-fdpbit"
 	extra_parts="$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o"
 	;;
+powerpc-*-aeabi*)
+ 	tmake_file="${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff t-crtstuff-pic t-fdpbit rs6000/t-ldbl128 t-softfp"
+	extra_parts="$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o"
+	;;
 powerpc-*-rtems*)
 	tmake_file="${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff t-crtstuff-pic t-fdpbit"
 	extra_parts="$extra_parts crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o"
