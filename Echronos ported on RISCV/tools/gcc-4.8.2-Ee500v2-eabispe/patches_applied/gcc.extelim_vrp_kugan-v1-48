# Problem Statement:
  Eliminate sign and zero extensions in PPC generated code based on
  Value Range Information.

# Owned by:
  Kugan Vivekanandarajah

# Action:
  * Add Value range information to tree SSA_NAME during Value Range Propagation (VRP)
    pass and remove redundant sign/zero extensions during RTL expansion.

    Version 2:
    http://gcc.gnu.org/ml/gcc-patches/2013-08/msg00777.html
    http://gcc.gnu.org/ml/gcc-patches/2013-08/msg00781.html

  * Ignore DImode extensions for now.

diff -Naur gcc-4.8.1-ext/gcc/cfgexpand.c gcc-4.8.1-kugan-patch-v2-update/gcc/cfgexpand.c
--- gcc-4.8.1-ext/gcc/cfgexpand.c	2013-07-24 03:57:20.491002675 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/cfgexpand.c	2013-08-16 03:18:07.235004007 -0500
@@ -2245,6 +2245,24 @@
 
 	    if (temp == target)
 	      ;
+            /* If the value in SUBREG of temp fits that SUBREG (does not
+               overflow) and is assigned to target SUBREG of the same mode
+               without sign convertion, we can skip the SUBREG
+               and extension.  */
+            else if (promoted
+                     && gimple_assign_is_zero_sign_ext_redundant (stmt)
+                     && (GET_CODE (temp) == SUBREG)
+                     && (GET_MODE_PRECISION (GET_MODE (SUBREG_REG (temp)))
+	                 >= GET_MODE_PRECISION (GET_MODE (target)))
+                     && (GET_MODE (SUBREG_REG (target))
+                         == GET_MODE (SUBREG_REG (temp)))
+                     /* DImode extensions are not handled properly,
+                        so we ignore for  now */
+                     && (GET_MODE_BITSIZE(GET_MODE(SUBREG_REG (target)))
+                         <= INT_TYPE_SIZE))
+              {
+	        emit_move_insn (SUBREG_REG (target), SUBREG_REG (temp));
+              }
 	    else if (promoted)
 	      {
 		int unsignedp = SUBREG_PROMOTED_UNSIGNED_P (target);
diff -Naur gcc-4.8.1-ext/gcc/dojump.c gcc-4.8.1-kugan-patch-v2-update/gcc/dojump.c
--- gcc-4.8.1-ext/gcc/dojump.c	2013-07-24 03:57:25.407002677 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/dojump.c	2013-08-16 03:15:40.795007929 -0500
@@ -34,6 +34,7 @@
 #include "ggc.h"
 #include "basic-block.h"
 #include "tm_p.h"
+#include "gimple.h"
 
 static bool prefer_and_bit_test (enum machine_mode, int);
 static void do_jump_by_parts_greater (tree, tree, int, rtx, rtx, int);
@@ -1108,6 +1109,67 @@
 
   type = TREE_TYPE (treeop0);
   mode = TYPE_MODE (type);
+
+  /* Is zero/sign extension redundant as per VRP.  */
+  bool op0_ext_redundant = false;
+  bool op1_ext_redundant = false;
+
+  /* If promoted and the value in SUBREG of op0 fits (does not overflow),
+     it is a candidate for extension elimination.  */
+  /* DImode extensions are not handled properly, so we ignore for  now */
+  if (GET_CODE (op0) == SUBREG && SUBREG_PROMOTED_VAR_P (op0)
+      && (GET_MODE_BITSIZE(GET_MODE(SUBREG_REG (op0))) <= INT_TYPE_SIZE))
+    op0_ext_redundant =
+      gimple_assign_is_zero_sign_ext_redundant (SSA_NAME_DEF_STMT (treeop0));
+
+  /* If promoted and the value in SUBREG of op1 fits (does not overflow),
+     it is a candidate for extension elimination.  */
+  /* DImode extensions are not handled properly, so we ignore for  now */
+  if (GET_CODE (op1) == SUBREG && SUBREG_PROMOTED_VAR_P (op1)
+      && (GET_MODE_BITSIZE(GET_MODE(SUBREG_REG (op1))) <= INT_TYPE_SIZE))
+    op1_ext_redundant =
+      gimple_assign_is_zero_sign_ext_redundant (SSA_NAME_DEF_STMT (treeop1));
+
+  /* If zero/sign extension is redundant, generate RTL
+     for operands without zero/sign extension.  */
+  if ((op0_ext_redundant || TREE_CODE (treeop0) == INTEGER_CST)
+      && (op1_ext_redundant || TREE_CODE (treeop1) == INTEGER_CST))
+    {
+      if ((TREE_CODE (treeop1) == INTEGER_CST)
+          && (!mode_signbit_p (GET_MODE (op0), op1)))
+        {
+          /* First operand is constant.  */
+          rtx new_op0 = gen_reg_rtx (GET_MODE (SUBREG_REG (op0)));
+
+          emit_move_insn (new_op0, SUBREG_REG (op0));
+          op0 = new_op0;
+        }
+      else if ((TREE_CODE (treeop0) == INTEGER_CST)
+              && (!mode_signbit_p (GET_MODE (op1), op0)))
+        {
+          /* Other operand is constant.  */
+          rtx new_op1 = gen_reg_rtx (GET_MODE (SUBREG_REG (op1)));
+
+          emit_move_insn (new_op1, SUBREG_REG (op1));
+          op1 = new_op1;
+        }
+      /* If both the comapre registers fits SUBREG and of the same mode.  */
+      else if ((TREE_CODE (treeop0) != INTEGER_CST)
+              && (TREE_CODE (treeop1) != INTEGER_CST)
+              && (GET_MODE (op0) == GET_MODE (op1))
+              && (GET_MODE (SUBREG_REG (op0)) == GET_MODE (SUBREG_REG (op1))))
+        {
+          rtx new_op0 = gen_reg_rtx (GET_MODE (SUBREG_REG (op0)));
+          rtx new_op1 = gen_reg_rtx (GET_MODE (SUBREG_REG (op1)));
+
+          emit_move_insn (new_op0, SUBREG_REG (op0));
+          emit_move_insn (new_op1, SUBREG_REG (op1));
+
+          op0 = new_op0;
+          op1 = new_op1;
+        }
+    }
+
   if (TREE_CODE (treeop0) == INTEGER_CST
       && (TREE_CODE (treeop1) != INTEGER_CST
           || (GET_MODE_BITSIZE (mode)
diff -Naur gcc-4.8.1-ext/gcc/gimple.c gcc-4.8.1-kugan-patch-v2-update/gcc/gimple.c
--- gcc-4.8.1-ext/gcc/gimple.c	2013-07-24 03:57:25.403002674 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/gimple.c	2013-08-14 04:05:34.105003593 -0500
@@ -200,6 +200,75 @@
     pt_solution_reset (gimple_call_clobber_set (s));
 }
 
+
+/* process gimple assign stmts and see if the sign/zero extensions are
+   redundant.  i.e.  if an assignment gimple statement has RHS expression
+   value that can fit in LHS type, truncation is redundant.  Zero/sign
+   extensions in this case can be removed.  */
+bool
+gimple_assign_is_zero_sign_ext_redundant (gimple stmt)
+{
+  double_int type_min, type_max;
+  tree int_val = NULL_TREE;
+  range_info_def *ri;
+
+  /* skip if not assign stmt.  */
+  if (!is_gimple_assign (stmt))
+    return false;
+
+  tree lhs = gimple_assign_lhs (stmt);
+
+  /* We can remove extension only for non-pointer and integral stmts.  */
+  if (!INTEGRAL_TYPE_P (TREE_TYPE (lhs))
+      || POINTER_TYPE_P (TREE_TYPE (lhs)))
+    return false;
+
+  type_max = tree_to_double_int (TYPE_MAX_VALUE (TREE_TYPE (lhs)));
+  type_min = tree_to_double_int (TYPE_MIN_VALUE (TREE_TYPE (lhs)));
+
+  /* For binary expressions, if one of the argument is constant and is
+     larger than tne signed maximum, it can be intepreted as nagative
+     and sign extended.  This could lead to problems so return false in
+     this case.  */
+  if (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) == tcc_binary)
+    {
+      tree rhs1 = gimple_assign_rhs1 (stmt);
+      tree rhs2 = gimple_assign_rhs2 (stmt);
+
+      if (TREE_CODE (rhs1) == INTEGER_CST)
+        int_val = rhs1;
+      else if (TREE_CODE (rhs2) == INTEGER_CST)
+        int_val = rhs2;
+
+      if (int_val != NULL_TREE)
+        {
+          tree max = TYPE_MIN_VALUE (TREE_TYPE (lhs));
+
+          /* if type is unsigned, get the max for signed equivalent.  */
+         if (!INT_CST_LT (TYPE_MIN_VALUE (TREE_TYPE (lhs)), integer_zero_node))
+            max = int_const_binop (RSHIFT_EXPR,
+                                    max, build_int_cst (TREE_TYPE (max), 1));
+          if (!INT_CST_LT (int_val, max))
+            return false;
+        }
+    }
+
+  /* Get the value range.  */
+  ri = SSA_NAME_RANGE_INFO (lhs);
+
+  /* Check if value range is valid.  */
+  if (!ri || !ri->valid || !ri->vr_range)
+    return false;
+
+  /* Value range fits type.  */
+  if (ri->max.scmp (type_max) != 1
+      && (type_min.scmp (ri->min) != 1))
+    return true;
+
+  return false;
+}
+
+
 /* Helper for gimple_build_call, gimple_build_call_valist,
    gimple_build_call_vec and gimple_build_call_from_tree.  Build the basic
    components of a GIMPLE_CALL statement to function FN with NARGS
diff -Naur gcc-4.8.1-ext/gcc/gimple.h gcc-4.8.1-kugan-patch-v2-update/gcc/gimple.h
--- gcc-4.8.1-ext/gcc/gimple.h	2013-07-24 03:57:20.336002675 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/gimple.h	2013-08-14 04:05:23.190003571 -0500
@@ -809,6 +809,7 @@
 int gimple_call_return_flags (const_gimple);
 int gimple_call_arg_flags (const_gimple, unsigned);
 void gimple_call_reset_alias_info (gimple);
+bool gimple_assign_is_zero_sign_ext_redundant (gimple);
 bool gimple_assign_copy_p (gimple);
 bool gimple_assign_ssa_name_copy_p (gimple);
 bool gimple_assign_unary_nop_p (gimple);
diff -Naur gcc-4.8.1-ext/gcc/gimple-pretty-print.c gcc-4.8.1-kugan-patch-v2-update/gcc/gimple-pretty-print.c
--- gcc-4.8.1-ext/gcc/gimple-pretty-print.c	2013-07-24 03:56:50.028002675 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/gimple-pretty-print.c	2013-08-14 04:04:52.485003581 -0500
@@ -1577,6 +1577,24 @@
     }
 }
 
+/* Dumps double_int CST to BUFFER.  */
+
+static void
+print_double_int (pretty_printer *buffer, double_int cst)
+{
+  tree node = double_int_to_tree (integer_type_node, cst);
+  if (TREE_INT_CST_HIGH (node) == 0)
+    pp_printf (buffer, HOST_WIDE_INT_PRINT_UNSIGNED, TREE_INT_CST_LOW (node));
+  else if (TREE_INT_CST_HIGH (node) == -1
+           && TREE_INT_CST_LOW (node) != 0)
+    pp_printf (buffer, "-" HOST_WIDE_INT_PRINT_UNSIGNED,
+               -TREE_INT_CST_LOW (node));
+  else
+    pp_printf (buffer, "0x%" HOST_LONG_FORMAT "x%" HOST_LONG_FORMAT "x",
+             (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (node),
+             (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (node));
+}
+
 
 /* Dump a PHI node PHI.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.
    The caller is responsible for calling pp_flush on BUFFER to finalize
@@ -1605,6 +1623,19 @@
       pp_string (buffer, "# ");
     }
 
+  if (!POINTER_TYPE_P (TREE_TYPE (lhs))
+      && SSA_NAME_RANGE_INFO (lhs))
+    {
+      struct range_info_def *ri = SSA_NAME_RANGE_INFO (lhs);
+      pp_printf (buffer, "# RANGE ");
+      pp_printf (buffer, "%s[", ri->vr_range ? "" : "~");
+      print_double_int (buffer, ri->min);
+      pp_printf (buffer, ", ");
+      print_double_int (buffer, ri->max);
+      pp_printf (buffer, "] VALID = %u ", ri->valid);
+      newline_and_indent (buffer, spc);
+    }
+
   if (flags & TDF_RAW)
       dump_gimple_fmt (buffer, spc, flags, "%G <%T, ", phi,
                        gimple_phi_result (phi));
@@ -1907,6 +1938,24 @@
 	}
     }
 
+  if (gimple_has_lhs (gs))
+    {
+      tree lhs = gimple_get_lhs (gs);
+      if ((TREE_CODE (lhs) == SSA_NAME)
+          && !POINTER_TYPE_P (TREE_TYPE (lhs))
+          && SSA_NAME_RANGE_INFO (lhs))
+        {
+          struct range_info_def *ri = SSA_NAME_RANGE_INFO (lhs);
+          pp_printf (buffer, "# RANGE ");
+          pp_printf (buffer, "%s[", ri->vr_range ? "" : "~");
+          print_double_int (buffer, ri->min);
+          pp_printf (buffer, ", ");
+          print_double_int (buffer, ri->max);
+          pp_printf (buffer, "] VALID = %u ", ri->valid);
+          newline_and_indent (buffer, spc);
+        }
+    }
+
   switch (gimple_code (gs))
     {
     case GIMPLE_ASM:
diff -Naur gcc-4.8.1-ext/gcc/tree-flow.h gcc-4.8.1-kugan-patch-v2-update/gcc/tree-flow.h
--- gcc-4.8.1-ext/gcc/tree-flow.h	2013-07-24 03:57:25.865002675 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/tree-flow.h	2013-08-14 04:05:35.811003529 -0500
@@ -147,6 +147,19 @@
   unsigned int misalign;
 };
 
+/* Value range information for SSA_NAMEs representing non-pointer variables.  */
+
+struct GTY (()) range_info_def {
+  /* Minmum for value range.  */
+  double_int min;
+  /* Maximum for value range.  */
+  double_int max;
+  /* Set to true if VR_RANGE and false if VR_ANTI_RANGE.  */
+  bool vr_range;
+  /* Set to true if range is valid.  */
+  bool valid;
+};
+
 
 /* It is advantageous to avoid things like life analysis for variables which
    do not need PHI nodes.  This enum describes whether or not a particular
@@ -528,12 +541,14 @@
 extern tree copy_ssa_name_fn (struct function *, tree, gimple);
 extern tree duplicate_ssa_name_fn (struct function *, tree, gimple);
 extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);
+extern void duplicate_ssa_name_range_info (tree, struct range_info_def *);
 extern void release_ssa_name (tree);
 extern void release_defs (gimple);
 extern void replace_ssa_name_symbol (tree, tree);
 extern bool get_ptr_info_alignment (struct ptr_info_def *, unsigned int *,
 				    unsigned int *);
 extern void mark_ptr_info_alignment_unknown (struct ptr_info_def *);
+extern void mark_range_info_unknown (struct range_info_def *);
 extern void set_ptr_info_alignment (struct ptr_info_def *, unsigned int,
 				    unsigned int);
 extern void adjust_ptr_info_misalignment (struct ptr_info_def *,
diff -Naur gcc-4.8.1-ext/gcc/tree.h gcc-4.8.1-kugan-patch-v2-update/gcc/tree.h
--- gcc-4.8.1-ext/gcc/tree.h	2013-07-24 03:57:25.861002672 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/tree.h	2013-08-14 04:05:35.689003572 -0500
@@ -1942,10 +1942,19 @@
 
 /* Attributes for SSA_NAMEs for pointer-type variables.  */
 #define SSA_NAME_PTR_INFO(N) \
-    SSA_NAME_CHECK (N)->ssa_name.ptr_info
+   SSA_NAME_CHECK (N)->ssa_name.vrp.ptr_info
+
+/* Value range info Attributes for SSA_NAMEs of non pointer-type variables.  */
+#define SSA_NAME_RANGE_INFO(N) \
+    SSA_NAME_CHECK (N)->ssa_name.vrp.range_info
+
+/* Sets the value range extreacted from VRP into SSA.  */
+void set_range_info (tree ssa, double_int min,
+                               double_int max, bool vr_range);
 
 /* Defined in tree-flow.h.  */
 struct ptr_info_def;
+struct range_info_def;
 
 /* Immediate use linking structure.  This structure is used for maintaining
    a doubly linked list of uses of an SSA_NAME.  */
@@ -1973,8 +1982,13 @@
   /* Statement that defines this SSA name.  */
   gimple def_stmt;
 
-  /* Pointer attributes used for alias analysis.  */
-  struct ptr_info_def *ptr_info;
+  /* Value range information.  */
+  union vrp_info_type {
+    /* Pointer attributes used for alias analysis.  */
+    struct GTY ((tag ("0"))) ptr_info_def *ptr_info;
+    /* Value range attributes used for zero/sign extension elimination.  */
+    struct GTY ((tag ("1"))) range_info_def *range_info;
+  } GTY ((desc ("%1.def_stmt && !POINTER_TYPE_P (TREE_TYPE ((tree)&%1))"))) vrp;
 
   /* Immediate uses list for this SSA_NAME.  */
   struct ssa_use_operand_d imm_uses;
diff -Naur gcc-4.8.1-ext/gcc/tree-ssa-alias.c gcc-4.8.1-kugan-patch-v2-update/gcc/tree-ssa-alias.c
--- gcc-4.8.1-ext/gcc/tree-ssa-alias.c	2013-07-24 03:57:28.064002661 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/tree-ssa-alias.c	2013-08-14 04:05:39.493003581 -0500
@@ -404,6 +404,7 @@
       struct ptr_info_def *pi;
 
       if (ptr == NULL_TREE
+          || !POINTER_TYPE_P (TREE_TYPE (ptr))
 	  || SSA_NAME_IN_FREE_LIST (ptr))
 	continue;
 
diff -Naur gcc-4.8.1-ext/gcc/tree-ssa-copy.c gcc-4.8.1-kugan-patch-v2-update/gcc/tree-ssa-copy.c
--- gcc-4.8.1-ext/gcc/tree-ssa-copy.c	2013-07-24 03:57:20.304002675 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/tree-ssa-copy.c	2013-08-14 04:05:23.072003563 -0500
@@ -764,11 +764,19 @@
 	 of the representative to the first solution we find if
 	 it doesn't have one already.  */
       if (copy_of[i].value != var
-	  && TREE_CODE (copy_of[i].value) == SSA_NAME
-	  && POINTER_TYPE_P (TREE_TYPE (var))
-	  && SSA_NAME_PTR_INFO (var)
-	  && !SSA_NAME_PTR_INFO (copy_of[i].value))
-	duplicate_ssa_name_ptr_info (copy_of[i].value, SSA_NAME_PTR_INFO (var));
+          && TREE_CODE (copy_of[i].value) == SSA_NAME)
+        {
+          if (POINTER_TYPE_P (TREE_TYPE (var))
+              && SSA_NAME_PTR_INFO (var)
+              && !SSA_NAME_PTR_INFO (copy_of[i].value))
+            duplicate_ssa_name_ptr_info (copy_of[i].value,
+                                         SSA_NAME_PTR_INFO (var));
+          else if (!POINTER_TYPE_P (TREE_TYPE (var))
+                   && SSA_NAME_RANGE_INFO (var)
+                   && !SSA_NAME_RANGE_INFO (copy_of[i].value))
+            duplicate_ssa_name_range_info (copy_of[i].value,
+                                           SSA_NAME_RANGE_INFO (var));
+        }
     }
 
   /* Don't do DCE if we have loops.  That's the simplest way to not
diff -Naur gcc-4.8.1-ext/gcc/tree-ssanames.c gcc-4.8.1-kugan-patch-v2-update/gcc/tree-ssanames.c
--- gcc-4.8.1-ext/gcc/tree-ssanames.c	2013-07-24 03:57:19.930002674 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/tree-ssanames.c	2013-08-14 04:05:22.945003563 -0500
@@ -151,7 +151,11 @@
       SET_SSA_NAME_VAR_OR_IDENTIFIER (t, var);
     }
   SSA_NAME_DEF_STMT (t) = stmt;
-  SSA_NAME_PTR_INFO (t) = NULL;
+  if (POINTER_TYPE_P (TREE_TYPE (t)))
+    SSA_NAME_PTR_INFO (t) = NULL;
+  else
+    SSA_NAME_RANGE_INFO (t) = NULL;
+
   SSA_NAME_IN_FREE_LIST (t) = 0;
   SSA_NAME_IS_DEFAULT_DEF (t) = 0;
   imm = &(SSA_NAME_IMM_USE_NODE (t));
@@ -163,6 +167,31 @@
   return t;
 }
 
+/* Store range information MIN, MAX and VR_RANGE type
+   from value range propagation to tree ssa_name NAME.  */
+
+void
+set_range_info (tree name, double_int min,
+                          double_int max, bool vr_range)
+{
+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));
+  gcc_assert (TREE_CODE (name) == SSA_NAME);
+  range_info_def *ri = SSA_NAME_RANGE_INFO (name);
+
+  /* Allocate if not available.  */
+  if (ri == NULL)
+    {
+      ri = ggc_alloc_cleared_range_info_def ();
+      mark_range_info_unknown (ri);
+      SSA_NAME_RANGE_INFO (name) = ri;
+    }
+
+  /* Set the values.  */
+  ri->valid = true;
+  ri->min = min;
+  ri->max = max;
+  ri->vr_range = vr_range;
+}
 
 /* We no longer need the SSA_NAME expression VAR, release it so that
    it may be reused.
@@ -266,6 +295,14 @@
   pi->misalign = 0;
 }
 
+/* Set the range described by RI has invalid values.  */
+
+void
+mark_range_info_unknown (struct range_info_def *ri)
+{
+  ri->valid = false;
+}
+
 /* Store the the power-of-two byte alignment and the deviation from that
    alignment of pointer described by PI to ALIOGN and MISALIGN
    respectively.  */
@@ -359,6 +396,26 @@
   SSA_NAME_PTR_INFO (name) = new_ptr_info;
 }
 
+/* Creates a duplicate of the range_info_def at RANGE_INFO for use by
+   the SSA name NAME.  */
+void
+duplicate_ssa_name_range_info (tree name, struct range_info_def *range_info)
+{
+  struct range_info_def *new_range_info;
+
+  gcc_assert (!POINTER_TYPE_P (TREE_TYPE (name)));
+  gcc_assert (!SSA_NAME_RANGE_INFO (name));
+
+  if (!range_info)
+    return;
+
+  new_range_info = ggc_alloc_range_info_def ();
+  *new_range_info = *range_info;
+
+  SSA_NAME_RANGE_INFO (name) = new_range_info;
+}
+
+
 
 /* Creates a duplicate of a ssa name NAME tobe defined by statement STMT
    in function FN.  */
@@ -367,10 +424,20 @@
 duplicate_ssa_name_fn (struct function *fn, tree name, gimple stmt)
 {
   tree new_name = copy_ssa_name_fn (fn, name, stmt);
-  struct ptr_info_def *old_ptr_info = SSA_NAME_PTR_INFO (name);
+  if (POINTER_TYPE_P (TREE_TYPE (name)))
+    {
+      struct ptr_info_def *old_ptr_info = SSA_NAME_PTR_INFO (name);
+
+      if (old_ptr_info)
+        duplicate_ssa_name_ptr_info (new_name, old_ptr_info);
+    }
+  else
+    {
+      struct range_info_def *old_range_info = SSA_NAME_RANGE_INFO (name);
 
-  if (old_ptr_info)
-    duplicate_ssa_name_ptr_info (new_name, old_ptr_info);
+      if (old_range_info)
+        duplicate_ssa_name_range_info (new_name, old_range_info);
+    }
 
   return new_name;
 }
diff -Naur gcc-4.8.1-ext/gcc/tree-vrp.c gcc-4.8.1-kugan-patch-v2-update/gcc/tree-vrp.c
--- gcc-4.8.1-ext/gcc/tree-vrp.c	2013-07-24 03:57:25.133002678 -0500
+++ gcc-4.8.1-kugan-patch-v2-update/gcc/tree-vrp.c	2013-08-14 04:05:31.934003581 -0500
@@ -3589,11 +3589,10 @@
 }
 
 
-/* Try to compute a useful range out of assignment STMT and store it
-   in *VR.  */
-
+/* Compute a useful range out of assignment STMT and store it
+   in VR.  */
 static void
-extract_range_from_assignment (value_range_t *vr, gimple stmt)
+extract_range_from_assignment_1 (value_range_t *vr, gimple stmt)
 {
   enum tree_code code = gimple_assign_rhs_code (stmt);
 
@@ -3623,6 +3622,19 @@
   else
     set_value_range_to_varying (vr);
 
+}
+
+/* Try to compute a useful range out of assignment STMT and store it
+   in *VR.  */
+
+static void
+extract_range_from_assignment (value_range_t *vr, gimple stmt)
+{
+  extract_range_from_assignment_1 (vr, stmt);
+
+  /* If range is varying try to derive nonnegative or nonzero
+     range out of STMT relying primarily on generic routines
+     in fold in conjunction with range data.  */
   if (vr->type == VR_VARYING)
     extract_range_basic (vr, stmt);
 }
@@ -8896,6 +8908,34 @@
     {
       enum tree_code rhs_code = gimple_assign_rhs_code (stmt);
       tree rhs1 = gimple_assign_rhs1 (stmt);
+      tree lhs = gimple_assign_lhs (stmt);
+
+      /* Set value range information for ssa.  */
+      if (!POINTER_TYPE_P (TREE_TYPE (gimple_assign_lhs (stmt)))
+          && (TREE_CODE (gimple_assign_lhs (stmt)) == SSA_NAME)
+          && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (stmt)))
+          && !SSA_NAME_RANGE_INFO (lhs))
+        {
+          value_range_t vr = VR_INITIALIZER;
+
+          /* Extract the value range of assigned exprassion
+             not considering the lhs type.  */
+          if ((gimple_assign_rhs_code (stmt) == NOP_EXPR)
+               || (gimple_assign_rhs_code (stmt) == CONVERT_EXPR))
+            extract_range_from_unary_expr (&vr, gimple_assign_rhs_code (stmt),
+                                           TREE_TYPE (rhs1),
+                                           gimple_assign_rhs1 (stmt));
+          else
+            extract_range_from_assignment_1 (&vr, stmt);
+
+          /* If value range is valid, set that.  */
+          if ((vr.type == VR_RANGE || vr.type == VR_ANTI_RANGE)
+              && range_int_cst_p (&vr))
+            set_range_info (lhs,
+                            tree_to_double_int (vr.min),
+                            tree_to_double_int (vr.max),
+                            vr.type == VR_RANGE);
+        }
 
       switch (rhs_code)
 	{
